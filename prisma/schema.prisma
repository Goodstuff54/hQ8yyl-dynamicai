//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id               String         @id() @default(uuid())
  name             String?
  email            String?        @unique()
  pictureUrl       String?        @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation  String?
  emailVerified    Boolean?
  stripeCustomerId String?
  status           UserStatus     @default(VERIFIED)
  globalRole       String         @default("USER")
  /// @password
  /// @omit
  password         String?
  dateCreated      DateTime       @default(now())
  dateUpdated      DateTime       @default(now()) @updatedAt()
  accounts         Account[]
  sessions         Session[]
  agents           Agent[]        @relation("user")
  templates        Template[]     @relation("user")
  conversations    Conversation[] @relation("user")
  messages         Message[]      @relation("user")
  analyticss       Analytics[]    @relation("user")
  subscriptions    Subscription[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model Agent {
  id            String         @id() @default(uuid())
  name          String?
  description   String?
  userId        String?
  user          User?          @relation(fields: [userId], references: [id], name: "user")
  conversations Conversation[] @relation("agent")
  messages      Message[]      @relation("agent")
  analyticss    Analytics[]    @relation("agent")
  dateCreated   DateTime       @default(now())
  dateUpdated   DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Conversation {
  id          String      @id() @default(uuid())
  title       String?
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], name: "user")
  agentId     String?
  agent       Agent?      @relation(fields: [agentId], references: [id], name: "agent")
  messages    Message[]   @relation("conversation")
  analyticss  Analytics[] @relation("conversation")
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id             String        @id() @default(uuid())
  content        String?
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], name: "conversation")
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  agentId        String?
  agent          Agent?        @relation(fields: [agentId], references: [id], name: "agent")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Analytics {
  id             String        @id() @default(uuid())
  metricName     String?
  metricValue    String?
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  agentId        String?
  agent          Agent?        @relation(fields: [agentId], references: [id], name: "agent")
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], name: "conversation")
  dateCreated    DateTime      @default(now())
  dateUpdated    DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Template {
  id          String   @id() @default(uuid())
  name        String?
  content     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Subscription {
  id          String   @id() @default(uuid())
  planName    String?
  startDate   String?
  endDate     String?
  status      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}

/// @@allow('all', true)
model Platform {
  id           String        @id() @default(uuid())
  name         String?
  description  String?
  integrations Integration[] @relation("platform")
  dateCreated  DateTime      @default(now())
  dateUpdated  DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Integration {
  id          String    @id() @default(uuid())
  name        String?
  description String?
  platformId  String?
  platform    Platform? @relation(fields: [platformId], references: [id], name: "platform")
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt()
}
